{"version":3,"sources":["../../../src/socket/websocket-rx.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAI3C;IAME,qBAAY,GAAY;QACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,sBAAW,iCAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAEM,0BAAI,GAAX,UAAY,IAAU;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAEM,2BAAK,GAAZ;QACE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAEO,6BAAO,GAAf,UAAgB,GAAY;QAC1B,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAEO,4BAAM,GAAd,UAAe,EAAc;QAC3B,MAAM,CAAC,UAAU,CAAC,MAAM,CACtB,UAAC,GAA2B;YAC1B,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,EAAE,CAAC,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjC,EAAE,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,CACF,CAAC;IACJ,CAAC;IACH,kBAAC;AAAD,CAzCA,AAyCC,IAAA","file":"websocket-rx.js","sourceRoot":"","sourcesContent":["\nimport {Subject} from \"rxjs/Subject\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Observer} from \"rxjs/Observer\";\n\n\nexport class WebsocketRx {\n\n  private socket : WebSocket;\n  private socketChannel : Observable<MessageEvent>;\n\n\n  constructor(url : string){\n    this.connect(url);\n  }\n\n  public get messages() : Observable<MessageEvent>{\n    return this.socketChannel;\n  }\n\n  public send(data : any){\n    if (this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(data);\n    }\n  }\n\n  public close(){\n    this.socket.close();\n  }\n\n  private connect(url : string) {\n    if(!this.socketChannel) {\n      this.socket = new WebSocket(url);\n      this.socketChannel = this.create(this.socket);\n    }\n  }\n\n  private create(ws : WebSocket): Subject<MessageEvent> {\n    return Observable.create(\n      (obs: Observer<MessageEvent>) => {\n        ws.onmessage = obs.next.bind(obs);\n        ws.onerror = obs.error.bind(obs);\n        ws.onclose = obs.complete.bind(obs);\n        return ws.close.bind(ws);\n      }\n    );\n  }\n}\n"]}