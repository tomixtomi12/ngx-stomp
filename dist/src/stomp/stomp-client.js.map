{"version":3,"sources":["../../../src/stomp/stomp-client.ts"],"names":[],"mappings":"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","file":"stomp-client.js","sourceRoot":"","sourcesContent":["/**\n * This codes based on https://github.com/aszechlicki/stomp-ts/tree/develop\n * TODO: Move this code into its own typescript library\n */\n\nimport {MessageSubscription, StompCommand, StompFrame, StompFrameError, StompFrameMessage} from \"./stomp-frame\";\nimport {BYTE, StompFrameDeserializer, StompFrameSerializer} from \"./stomp-frame-parser\";\nimport {Subject} from \"rxjs/Subject\";\nimport {Observable} from \"rxjs/Observable\";\n\n\nexport const Stomp = {\n  VERSIONS: {\n    V1_0: '1.0',\n    V1_1: '1.1',\n    V1_2: '1.2'\n  },\n  supportedVersions: '1.1,1.0',\n  client: (url: string, protocols: string[] = ['v10.stomp', 'v11.stomp']) => {\n    let ws = new WebSocket(url, protocols);\n    return new StompClient(ws);\n  }\n};\n\nexport class StompConfig {\n  public headers = new Map<string,string>();\n  public login?: string;\n  public passcode?: string;\n}\n\n\n\nexport class StompClient {\n\n  private frameSerializer = new StompFrameSerializer();\n  private frameDeserializer = new StompFrameDeserializer();\n\n  private counter: number = 0;\n  private connected: boolean = false;\n  private heartbeat = {\n    outgoing: 10000,\n    incoming: 10000\n  };\n  private serverActivity: number;\n  private pinger: any;\n  private ponger: any;\n  private partialData: string;\n\n  private connectSubject = new Subject<StompFrame>();\n  private receiptSubject = new Subject<StompFrame>();\n  private messageSubject = new Subject<StompFrameMessage>();\n  private errorSubject = new Subject<StompFrame>();\n\n\n  /**\n   * maximum *WebSocket* frame size sent by the client. If the STOMP frame\n   * is bigger than this value, the STOMP frame will be sent using multiple\n   * WebSocket frames (default is 16KiB)\n   * @type {number}\n   */\n  private maxWebSocketFrameSize = 16 * 1024;\n  private subscriptions = new Map<string, MessageSubscription>();\n\n  constructor(private ws: WebSocket) {\n    this.ws.binaryType = 'arraybuffer';\n\n    console.log(\"socket state:\", ws.readyState)\n  }\n\n  public get receipts() : Observable<StompFrame>{\n    return this.receiptSubject;\n  }\n\n  public get messages() : Observable<StompFrameMessage>{\n    return this.messageSubject;\n  }\n\n  public get errors(): Observable<StompFrameError>{\n    return this.errorSubject;\n  }\n\n  public get onConnect() : Observable<StompFrame> {\n    return this.connectSubject;\n  }\n\n\n  public connect(config?: StompConfig) : void {\n\n    if(!config) config = new StompConfig();\n\n    if (!config.headers) {\n      config.headers = new Map<string,string>();\n    }\n    if (config.login) {\n      config.headers.set('login', config.login);\n    }\n    if (config.passcode) {\n      config.headers.set('passcode', config.passcode);\n    }\n\n    this.debug('Opening WebSocket...');\n\n    this.ws.onmessage = (evt: MessageEvent) => {\n      let unmarshalledData = this.frameDeserializer.deserializeMessage(evt.data);\n      this.serverActivity = Date.now();\n      unmarshalledData.frames.forEach(f => this.handleFrame(f));\n    };\n\n    this.ws.onclose = () => {\n      const message = `Lost connection to ${this.ws.url}`;\n      this.debug(message);\n      this.cleanup();\n\n      this.onError(new StompFrameError(message));\n    };\n\n    this.ws.onopen = () => {\n      this.debug('WebSocket opened. Attempting to connect to STOMP now...');\n\n      let headers = new Map<string,string>();\n      headers.set('accept-version', '1.2');\n      headers.set('host', 'localhost');\n      //headers.set('accept-version', Stomp.supportedVersions);\n      //headers.set('heart-beat', [this.heartbeat.outgoing, this.heartbeat.incoming].join(','));\n\n      this.transmit(StompCommand.CONNECT, headers);\n    };\n  }\n\n  /**\n   * [DISCONNECT Frame](http://stomp.github.com/stomp-specification-1.1.html#DISCONNECT)\n   * @param disconnectCallback\n   * @param headers\n   */\n  public disconnect(disconnectCallback: ()=>{}, headers: Map<string,string>) : void {\n    this.transmit(StompCommand.DISCONNECT, headers);\n    this.ws.onclose = null;\n    this.ws.close();\n    this.cleanup();\n    disconnectCallback();\n  }\n\n  /**\n   * [SEND Frame](http://stomp.github.com/stomp-specification-1.1.html#SEND)\n   * @param destination\n   * @param headers\n   * @param body\n   */\n  public send(destination: string, body: string): void {\n    let headers = new Map<string,string>();\n    headers.set('destination', destination);\n    this.transmit(StompCommand.SEND, headers, body);\n  }\n\n  /**\n   * [SUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#SUBSCRIBE)\n   * @param destination\n   * @param callback\n   * @param headers\n   */\n  public subscribe(destination: string, headers?: Map<string,string>) : MessageSubscription {\n\n    if(!headers){\n      headers = new Map<string,string>();\n    }\n\n    let subId = headers.get('id') ? headers.get('id') : `sub-${this.counter++}`;\n    headers.set('id', subId);\n\n    let sub = new MessageSubscription(subId, destination, this.messages);\n    this.subscriptions.set(destination, sub);\n    headers.set('destination', destination);\n    headers.set('ack', 'auto');\n    this.transmit(StompCommand.SUBSCRIBE, headers);\n\n    return sub;\n  }\n\n  /**\n   * [UNSUBSCRIBE Frame](http://stomp.github.com/stomp-specification-1.1.html#UNSUBSCRIBE)\n   * @param sub\n   */\n  public unsubscribe(sub: MessageSubscription) : void {\n    let headers = new Map<string,string>();\n    headers.set('id', sub.subscriptionId);\n    this.subscriptions.delete(sub.subscriptionId);\n    this.transmit(StompCommand.UNSUBSCRIBE, headers);\n  }\n\n  /**\n   * [ABORT Frame](http://stomp.github.com/stomp-specification-1.1.html#ABORT)\n   * @param transaction\n   */\n  public abort(transaction: string) {\n\n    let headers = new Map<string,string>();\n    headers.set('transaction', transaction);\n\n    this.transmit(StompCommand.ABORT, headers);\n  }\n\n  /**\n   * [BEGIN Frame](http://stomp.github.com/stomp-specification-1.1.html#BEGIN)\n   * @param transaction\n   */\n  public begin(transaction?: string) {\n    let txid = transaction || `tx-${this.counter++}`;\n\n    let headers = new Map<string,string>();\n    headers.set('transaction', txid);\n\n\n    this.transmit(StompCommand.BEGIN, headers);\n    return {\n      id: txid,\n      commit: () => {\n        this.commit(txid);\n      },\n      abort: () => {\n        this.abort(txid);\n      }\n    }\n  }\n\n  /**\n   * [COMMIT Frame](http://stomp.github.com/stomp-specification-1.1.html#COMMIT)\n   * @param transaction\n   */\n  public commit(transaction: string) {\n    let headers = new Map<string,string>();\n    headers.set('transaction', transaction);\n\n    this.transmit(StompCommand.COMMIT, headers);\n  }\n\n  /**\n   * [ACK Frame](http://stomp.github.com/stomp-specification-1.1.html#ACK)\n   * @param id\n   * @param transaction\n   */\n  public ack(id : string, transaction? : string) {\n    let headers = new Map<string,string>();\n    headers.set('id', id);\n    if(transaction){\n      headers.set('transaction', transaction);\n    }\n    this.transmit(StompCommand.ACK, headers);\n  }\n\n  /**\n   * [NACK Frame](http://stomp.github.com/stomp-specification-1.1.html#NACK)\n   * @param id\n   * @param transaction\n   */\n  public nack(id : string, transaction? : string) {\n    let headers = new Map<string,string>();\n    headers.set('id', id);\n    if(transaction){\n      headers.set('transaction', transaction);\n    }\n    this.transmit(StompCommand.NACK, headers);\n  }\n\n  private cleanup() {\n    this.connected = false;\n    clearInterval(this.pinger);\n    clearInterval(this.ponger);\n  }\n\n  private handleFrame(frame: StompFrame) {\n    switch (frame.command) {\n      // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.1.html#CONNECTED_Frame)\n      case StompCommand.CONNECTED:\n        this.debug(`connected to server `, frame.getHeader('server'));\n        this.connected = true;\n        this.setupHeartbeat(frame);\n        this.connectSubject.next(frame);\n        break;\n      // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.1.html#MESSAGE)\n      case StompCommand.MESSAGE:\n        this.messageSubject.next(new StompFrameMessage(frame));\n        break;\n      //[RECEIPT Frame](http://stomp.github.com/stomp-specification-1.1.html#RECEIPT)\n      case StompCommand.RECEIPT:\n        this.receiptSubject.next(frame);\n        break;\n      case StompCommand.ERROR:\n        this.onError(new StompFrameError(null, frame));\n        this.debug('error received: ', frame);\n        break;\n      default:\n        throw new Error(`not supported STOMP command '${frame.command}'`);\n    }\n  }\n\n  private onError(error : StompFrameError){\n    this.errorSubject.next(error);\n  }\n\n  private transmit(command: StompCommand, headers: Map<string,string>, body?: string): void {\n    let frame = StompFrame.build(command, headers, body);\n    let out = this.frameSerializer.serialize(frame);\n    this.debug(\">>> \", out);\n    while (out.length > this.maxWebSocketFrameSize) {\n      this.ws.send(out.substring(0, this.maxWebSocketFrameSize));\n      out = out.substring(this.maxWebSocketFrameSize);\n      this.debug(\"remaining = \", out.length);\n    }\n    this.ws.send(out);\n  }\n\n  private setupHeartbeat(frame : StompFrame) {\n    if (!frame.getHeader('version') || frame.getHeader('version') === Stomp.VERSIONS.V1_0) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    // heart-beat: sx, sy\n    const heartBeat = frame.getHeader('heart-beat').split(',').map(parseInt);\n    const serverIncoming = heartBeat[0];\n    const serverOutgoing = heartBeat[1];\n\n    if (this.heartbeat.outgoing > 0 && serverOutgoing > 0) {\n      let ttl = Math.max(this.heartbeat.outgoing, serverOutgoing);\n      this.debug(`Check PING every ${ttl}ms`);\n\n      this.pinger = setInterval(() => {\n        this.sendHeartBeat();\n      }, ttl);\n    }\n\n    if (this.heartbeat.incoming > 0 && serverIncoming > 0) {\n      let ttl = Math.max(this.heartbeat.incoming, serverIncoming);\n      this.debug(`check PONG every ${ttl}ms`);\n      this.ponger = setInterval(() => {\n        let delta = Date.now() - this.serverActivity;\n        if (delta > ttl * 2) {\n          this.debug(`Did not receive server activity for the last ${delta}ms`);\n          this.ws.close();\n        }\n      }, ttl);\n    }\n  }\n\n  private sendHeartBeat() : void {\n    this.ws.send(BYTE.LF);\n    this.debug('>>> PING');\n  }\n\n  private debug(message: string, ...args: any[]) {\n    console.log(message, args);\n  }\n}\n"]}