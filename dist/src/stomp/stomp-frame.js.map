{"version":3,"sources":["../../../src/stomp/stomp-frame.ts"],"names":[],"mappings":"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","file":"stomp-frame.js","sourceRoot":"","sourcesContent":["\n\n\n\nimport {Observable} from \"rxjs/Rx\";\n\nexport interface FrameBuffer {\n  frames: StompFrame[],\n  partial: string\n}\n\nexport class MessageSubscription {\n\n  constructor(\n    private _id : string,\n    private _destination : string,\n    private _messages : Observable<StompFrameMessage>){\n  }\n\n  /**\n   * Gets the internal subscription id\n   * @returns {string}\n   */\n  public get subscriptionId():string{ return this._id; }\n\n  /**\n   * Gets the subsription destionation\n   * @returns {string}\n   */\n  public get destination():string{ return this._destination; }\n\n  /**\n   * Gets an observable stream of all messages of this subscription.\n   */\n  public get messages() : Observable<StompFrameMessage> {\n    return this._messages\n        .filter(m => m.subscriptionId == this.subscriptionId);\n  }\n}\n\n\nexport enum StompCommand {\n  ACK,\n  NACK,\n  ABORT,\n  BEGIN,\n  COMMIT,\n  CONNECT,\n  CONNECTED,\n  DISCONNECT,\n  MESSAGE,\n  RECEIPT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n  SEND,\n  ERROR\n}\n\n\nexport class StompFrame {\n\n  private _command : StompCommand;\n  private _body : string = null;\n  private _headers : Map<string,string>;\n\n  constructor(\n    command: StompCommand,\n    body: string,\n    headers? : Map<string,string>) {\n\n    if(!command) throw new Error(\"ArgumentNullException: 'command'\");\n\n    this._command = command;\n    this._body = body;\n\n    if(headers){\n      this._headers = new Map(headers);\n    }else{\n      this._headers = new Map<string,string>()\n    }\n  }\n\n  public get command() : StompCommand{\n    return this._command;\n  }\n\n  public get body() : string {\n    return this._body;\n  }\n\n  public get bodyJson() : any {\n    if(this._body){\n      return JSON.parse(this._body);\n    }\n    return null;\n  }\n\n  /**\n   * Gets the header value with the given key if available.\n   * Otherwise, returns null.\n   *\n   * @param key\n   * @returns {undefined|string}\n   */\n  public getHeader(key:string) : string | null {\n    return this._headers.get(key);\n  }\n\n  /**\n   *  Gets the header value with the given key if available.\n   *  Otherwise, throws an exception.\n   *\n   * @param key\n   * @returns {string}\n   */\n  public getRequiredHeader(key:string): string {\n    let header = this.getHeader(key);\n    if(header){\n      return header;\n    }\n    throw new Error(\"The required header \" + key + \" was not present in the frame!\");\n  }\n\n  public setHeader(key:string, value:string) : void {\n    this._headers.set(key, value);\n  }\n\n  public foreachHeader(callbackfn: (value: string, key: string) => void) : void{\n    this._headers.forEach(callbackfn);\n  }\n\n  public static build(command: StompCommand, headers: Map<string,string>, body: string) : StompFrame {\n    return new StompFrame(command, body, headers);\n  }\n\n  public get headers():Map<string,string>{ return this._headers;}\n}\n\nexport class StompFrameMessage extends StompFrame {\n  constructor(frame : StompFrame){\n    super(frame.command, frame.body, frame.headers)\n  }\n\n  public get messageId() : string {\n    return this.getRequiredHeader('message-id');\n  }\n\n  public get destination() : string {\n    return this.getRequiredHeader('destination');\n  }\n\n  public get subscriptionId() : string {\n    return this.getRequiredHeader('subscription');\n  }\n}\n\nexport class StompFrameError extends StompFrame {\n\n  constructor(message : string, frame? : StompFrame){\n    super(StompCommand.ERROR, frame != null ? frame.body : null, frame != null ? frame.headers : null);\n\n    if(message){\n      this.setHeader('message', message);\n    }\n  }\n\n  public get errorMessage() : string {\n    return this.getHeader('message');\n  }\n\n  public get errorDetail() : string {\n    return this.body;\n  }\n}\n"]}